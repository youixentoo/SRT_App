/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.srt.srt_app;

import com.github.rcaller.rstuff.RCaller;
import com.github.rcaller.rstuff.RCode;
import java.awt.Component;
import java.awt.Dimension;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.DocumentFilter;
import javax.swing.text.PlainDocument;
import org.yaml.snakeyaml.Yaml;

/**
 *
 * @author Thijs Weenink
 * @version 1.1
 */
public class SRT_Frame extends javax.swing.JFrame {

    /**
     * Creates new form SRT_Frame
     */
    public SRT_Frame() {
        createRCode();
        initComponents();
        initConfig();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        editDialog = new javax.swing.JDialog();
        editConfigPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dec_sepTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        out_locTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        gen_monTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        day3_datesTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        deadNormalTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        deadSRTTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        wasoNormalTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        wasoSRTTextField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel15 = new javax.swing.JLabel();
        selectFiles = new javax.swing.JButton();
        selectFilesLabel = new javax.swing.JLabel();
        processButton = new javax.swing.JButton();
        processFilesLabel = new javax.swing.JLabel();
        filesLoadedLabel = new javax.swing.JLabel();
        processLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextPane = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        SRT_menubar = new javax.swing.JMenuBar();
        SRTMenu1 = new javax.swing.JMenu();
        editConfig = new javax.swing.JMenuItem();

        fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));

        editDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        editDialog.setMinimumSize(new java.awt.Dimension(350, 500));
        editDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                editDialogWindowClosing(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Configuration settings");

        jLabel3.setText("Decimal separator");

        dec_sepTextField.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        dec_sepTextField.setName("dec_sep"); // NOI18N

        jLabel4.setText("Output location");

        out_locTextField.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        out_locTextField.setName("out_loc"); // NOI18N

        jLabel5.setText("Genotype monitor");

        gen_monTextField.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        gen_monTextField.setName("gen_mon"); // NOI18N

        jLabel6.setText("Day 3 dates");

        day3_datesTextField.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        day3_datesTextField.setName("day3"); // NOI18N

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Dead flies threshold");

        jLabel8.setText("Normal");

        deadNormalTextField.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        deadNormalTextField.setName("dead_nor"); // NOI18N

        jLabel9.setText("SRT");

        deadSRTTextField.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        deadSRTTextField.setName("dead_srt"); // NOI18N

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setText("WASO");

        jLabel11.setText("Normal");

        wasoNormalTextField.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        wasoNormalTextField.setName("waso_nor"); // NOI18N

        jLabel12.setText("SRT");

        wasoSRTTextField.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        wasoSRTTextField.setName("waso_srt"); // NOI18N

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel13.setText("File locations");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel14.setText("General settings");

        jLabel15.setText("Saves on exit");

        javax.swing.GroupLayout editConfigPanelLayout = new javax.swing.GroupLayout(editConfigPanel);
        editConfigPanel.setLayout(editConfigPanelLayout);
        editConfigPanelLayout.setHorizontalGroup(
            editConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2)
                    .addComponent(jSeparator3)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, editConfigPanelLayout.createSequentialGroup()
                        .addGroup(editConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addGroup(editConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dec_sepTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(out_locTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gen_monTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(day3_datesTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deadNormalTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deadSRTTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(wasoNormalTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(wasoSRTTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, editConfigPanelLayout.createSequentialGroup()
                        .addGroup(editConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, editConfigPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel15)))
                .addContainerGap())
        );

        editConfigPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {day3_datesTextField, deadNormalTextField, deadSRTTextField, dec_sepTextField, gen_monTextField, out_locTextField, wasoNormalTextField, wasoSRTTextField});

        editConfigPanelLayout.setVerticalGroup(
            editConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel15))
                .addGap(24, 24, 24)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dec_sepTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(out_locTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gen_monTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(day3_datesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deadNormalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deadSRTTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wasoNormalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wasoSRTTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        PlainDocument dNTdoc = (PlainDocument) deadNormalTextField.getDocument();
        dNTdoc.setDocumentFilter(new CustomIntFilter());
        PlainDocument dSTdoc = (PlainDocument) deadSRTTextField.getDocument();
        dSTdoc.setDocumentFilter(new CustomIntFilter());
        PlainDocument wasoNdoc = (PlainDocument) wasoNormalTextField.getDocument();
        wasoNdoc.setDocumentFilter(new CustomIntFilter());
        PlainDocument wasoSdoc = (PlainDocument) wasoSRTTextField.getDocument();
        wasoSdoc.setDocumentFilter(new CustomIntFilter());

        javax.swing.GroupLayout editDialogLayout = new javax.swing.GroupLayout(editDialog.getContentPane());
        editDialog.getContentPane().setLayout(editDialogLayout);
        editDialogLayout.setHorizontalGroup(
            editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editConfigPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        editDialogLayout.setVerticalGroup(
            editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editConfigPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("SRT app");
        setName("SRT_app"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        selectFiles.setText("Select...");
        selectFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFilesActionPerformed(evt);
            }
        });

        selectFilesLabel.setText("Select files");

        processButton.setText("Process");
        processButton.setEnabled(false);
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });

        processFilesLabel.setText("Process files");

        outputTextPane.setEditable(false);
        outputTextPane.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jScrollPane1.setViewportView(outputTextPane);

        jLabel1.setText("Status");

        SRTMenu1.setText("Config");

        editConfig.setText("Edit");
        editConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editConfigActionPerformed(evt);
            }
        });
        SRTMenu1.add(editConfig);

        SRT_menubar.add(SRTMenu1);

        setJMenuBar(SRT_menubar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(processFilesLabel)
                                    .addComponent(selectFilesLabel)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(selectFiles)
                                    .addComponent(processButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(filesLoadedLabel)
                                    .addComponent(processLabel))))
                        .addGap(0, 191, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectFilesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectFiles)
                    .addComponent(filesLoadedLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(processFilesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processButton)
                    .addComponent(processLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFilesActionPerformed
        selectFilesForProcessing();
    }//GEN-LAST:event_selectFilesActionPerformed

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        callRScript();
    }//GEN-LAST:event_processButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // Custom closing to also close the RCaller processes
        try {
            caller.stopStreamConsumers();
            caller.stopRCallerOnline();
        } catch (Exception exc) {
        }
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void editDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_editDialogWindowClosing
        editDialog.setVisible(false);
        saveConfig();
    }//GEN-LAST:event_editDialogWindowClosing

    private void editConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editConfigActionPerformed
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                editDialog.setVisible(true);
            }
        });
    }//GEN-LAST:event_editConfigActionPerformed

    /**
     * Main function for selecting files to be processed by R
     */
    private void selectFilesForProcessing() {
        // File filter for .txt files only
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TXT Files", "txt");
        File[] files = selectMultipleFiles(filter);
        if (files == null) {
            if (!"".equals(filesLoadedLabel.getText())) {
                new Thread() {
                    @Override
                    public void run() {
                        String temp = filesLoadedLabel.getText();
                        filesLoadedLabel.setText("File selection cancelled");
                        try {
                            Thread.sleep(1500);
                        } catch (InterruptedException ex) {
                        }
                        filesLoadedLabel.setText(temp);
                    }
                }.start();
            }
        } else {
            processButton.setEnabled(true);
            selectedFiles = files;
            String labelString;
            int amountFiles = files.length;
            if (amountFiles == 1) {
                labelString = "1 file selected";
            } else {
                labelString = String.format("%d files selected", amountFiles);
            }
            filesLoadedLabel.setText(labelString);
        }
    }

    /**
     * Main function for calling the R script and processing the returned data
     */
    private void callRScript() {
        new Thread() {
            @Override
            public void run() {
                processLabel.setText("Working...");
                Map<String, String> fileSuccess = processSelectedFiles();
                processLabel.setText("Done");
                handleOutput(fileSuccess);
            }
        }.start();
    }

    /**
     * Function for selecting multiple files using the filechooser.
     *
     * @param filter FileNameExtensionFilter
     * @return The selected files
     */
    private File[] selectMultipleFiles(FileNameExtensionFilter filter) {
        File[] files = null;
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.resetChoosableFileFilters();
        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            files = fileChooser.getSelectedFiles();
        }
        return files;
    }

    /**
     * Function for selecting single files using the filechooser
     *
     * @param filter FileNameExtensionFilter
     * @return The selected file
     */
    private File selectSingleFile(FileNameExtensionFilter filter) {
        File file = null;
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.resetChoosableFileFilters();
        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
        }
        return file;
    }

    /**
     * Function for getting the config.yml from the Configs folder
     *
     * @return The config as a Map
     */
    private Map<String, Object> getConfig() {
        InputStream inputStream = null;
        Map<String, Object> yamlObject = null;
        try {
            Yaml yaml = new Yaml();
            File file = new File("Configs/config.yml");
            inputStream = new FileInputStream(file);
            yamlObject = yaml.load(inputStream);
        } catch (FileNotFoundException ex) {
            // Inform of missing file and exitting after.
            JOptionPane.showMessageDialog(this, "File: Configs/config.yml not found", "Warning", JOptionPane.WARNING_MESSAGE);
            System.exit(0);
        }
        return yamlObject;
    }

    /**
     * Function for handling the output coming from the R script. Inserts the
     * key+value into the jTextPane.
     *
     * @param fileSuccess The output coming from processSelectedFiles()
     * @see processSelectedFiles()
     */
    private void handleOutput(Map<String, String> fileSuccess) {
        addTextToTextPane("\n");
        for (var entry : fileSuccess.entrySet()) {
            addTextToTextPane(entry.getKey() + ": " + entry.getValue() + "\n");
        }
        addTextToTextPane("Results:\n");
    }

    /**
     * Function to add strings to the jTextPane
     *
     * @param message String
     */
    private void addTextToTextPane(String message) {
        try {
            outputTextPane.getStyledDocument().insertString(0, message, null);
        } catch (BadLocationException ex) {
        }
    }

    /**
     * Function to call the R script.
     *
     * @return A Map with the filepath as key and either an error message or
     * 'success' as value
     */
    private Map<String, String> processSelectedFiles() {
        // Converts from \ to / in filepaths, R requires it
        String[] files = Arrays.stream(selectedFiles).map(File::getAbsolutePath).map(str -> str.replaceAll("\\\\", "/")).toArray(String[]::new);
        addTextToTextPane("Current files being processed:\n" + Arrays.toString(files) + "\n\n\n");
        if (firstRun) {
            code.addStringArray("input", files);
            code.addRCode("result = SRT_main(input)");
            caller.setRCode(code);
            firstRun = false;
        } else {
            code.clear();
            code.addStringArray("input", files);
            code.addRCode("result = SRT_main(input)");
        }

        caller.runAndReturnResultOnline("result");
        String[] results = caller.getParser().getAsStringArray("result");
        Map<String, String> fileSuccess = IntStream.range(0, files.length).boxed()
                .collect(Collectors.toMap(i -> files[i], i -> results[i].strip()));

        return fileSuccess;
    }

    /**
     * Stores the R code into a variable, checks if the R scripts can be found,
     * creates a warning message if it can't.
     */
    private void createRCode() {
        String[] scriptList = {"Rcode/main.R", "Rcode/calculations.R", "Rcode/file_processing.R", "Rcode/proccessing.R"};
        String message = "The following file(s) are missing:";
        boolean scriptError = false;
        for (String filePath : scriptList) {
            File temp = new File(filePath);
            if (!temp.exists()) {
                scriptError = true;
                message += "\n" + filePath;
            }
        }
        if (scriptError) {
            JOptionPane.showMessageDialog(this, message, "Warning", JOptionPane.WARNING_MESSAGE);
            System.exit(0);
        }

        code = RCode.create();
        caller = RCaller.create();
        String rSource = "Rcode/main.R";
        code.R_source(rSource);
    }

    /**
     * Saves the values from the jDialog into a HashMap, if any values are
     * changed, the new HashMap gets written to Configs/config.yml.
     */
    private void saveConfig() {
        Map dead = new LinkedHashMap<>();
        Map waso = new LinkedHashMap<>();
        dead.put("normal", Integer.parseInt(deadNormalTextField.getText()));
        dead.put("SRT", Integer.parseInt(deadSRTTextField.getText()));
        waso.put("normal", Integer.parseInt(wasoNormalTextField.getText()));
        waso.put("SRT", Integer.parseInt(wasoSRTTextField.getText()));

        Map data = new LinkedHashMap<>();
        data.put("dec_sep", dec_sepTextField.getText());
        data.put("out_loc", out_locTextField.getText());
        data.put("genotype_monitor", gen_monTextField.getText());
        data.put("day3_dates", day3_datesTextField.getText());
        data.put("dead_threshold", dead);
        data.put("WASO", waso);

        Map def = new LinkedHashMap<>();
        def.put("default", data);

        // Only saves to file if any changes are made
        if (!yamlConfig.equals(def)) {
            PrintWriter writer;
            try {
                writer = new PrintWriter(new File("Configs/config.yml"));
                Yaml yaml = new Yaml();
                yaml.dump(def, writer);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "An error occurred while trying to save the file", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    /**
     * Loads the configuration settings from Configs/config.yml. Also sets the
     * width of the jDialog to fit the largest jTextField
     */
    private void initConfig() {
        yamlConfig = getConfig();
        Map data = (Map) yamlConfig.get("default");
        Map dead = (Map) data.get("dead_threshold");
        Map WASO = (Map) data.get("WASO");

        dec_sepTextField.setText(data.get("dec_sep").toString());
        out_locTextField.setText(data.get("out_loc").toString());
        gen_monTextField.setText(data.get("genotype_monitor").toString());
        day3_datesTextField.setText(data.get("day3_dates").toString());
        deadNormalTextField.setText(dead.get("normal").toString());
        deadSRTTextField.setText(dead.get("SRT").toString());
        wasoNormalTextField.setText(WASO.get("normal").toString());
        wasoSRTTextField.setText(WASO.get("SRT").toString());

        Component[] comps = editConfigPanel.getComponents();
        int widest = 0;
        for (Component comp : comps) {
            if (comp.getPreferredSize().width > widest) {
                widest = comp.getPreferredSize().width;
            }
        }
        // Sets the window to fit the largest textField
        Dimension dialogDim = editDialog.getSize();
        dialogDim.setSize(140 + widest + 12, dialogDim.height);
        editDialog.setSize(dialogDim);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SRT_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SRT_Frame().setVisible(true);
            }
        });
    }

    private File[] selectedFiles;
    private RCode code;
    private RCaller caller;
    private boolean firstRun = true;
    private Map<String, Object> yamlConfig;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu SRTMenu1;
    private javax.swing.JMenuBar SRT_menubar;
    private javax.swing.JTextField day3_datesTextField;
    private javax.swing.JTextField deadNormalTextField;
    private javax.swing.JTextField deadSRTTextField;
    private javax.swing.JTextField dec_sepTextField;
    private javax.swing.JMenuItem editConfig;
    private javax.swing.JPanel editConfigPanel;
    private javax.swing.JDialog editDialog;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel filesLoadedLabel;
    private javax.swing.JTextField gen_monTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField out_locTextField;
    private javax.swing.JTextPane outputTextPane;
    private javax.swing.JButton processButton;
    private javax.swing.JLabel processFilesLabel;
    private javax.swing.JLabel processLabel;
    private javax.swing.JButton selectFiles;
    private javax.swing.JLabel selectFilesLabel;
    private javax.swing.JTextField wasoNormalTextField;
    private javax.swing.JTextField wasoSRTTextField;
    // End of variables declaration//GEN-END:variables
}

/**
 * Custom DocumentFilter to force the use of Integers in the deadthreshold and
 * waso categories of the jDialog window.
 * https://stackoverflow.com/questions/11093326/restricting-jtextfield-input-to-integers/11093360#11093360
 */
class CustomIntFilter extends DocumentFilter {

    @Override
    public void insertString(FilterBypass fb, int offset, String string,
            AttributeSet attr) throws BadLocationException {

        Document doc = fb.getDocument();
        StringBuilder sb = new StringBuilder();
        sb.append(doc.getText(0, doc.getLength()));
        sb.insert(offset, string);

        if (test(sb.toString())) {
            super.insertString(fb, offset, string, attr);
        } else {
            // warn the user and don't allow the insert
        }
    }

    private boolean test(String text) {
        try {
            Integer.parseInt(text);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    @Override
    public void replace(FilterBypass fb, int offset, int length, String text,
            AttributeSet attrs) throws BadLocationException {

        Document doc = fb.getDocument();
        StringBuilder sb = new StringBuilder();
        sb.append(doc.getText(0, doc.getLength()));
        sb.replace(offset, offset + length, text);

        if (test(sb.toString())) {
            super.replace(fb, offset, length, text, attrs);
        } else {
            // warn the user and don't allow the insert
        }

    }

    @Override
    public void remove(FilterBypass fb, int offset, int length)
            throws BadLocationException {
        Document doc = fb.getDocument();
        StringBuilder sb = new StringBuilder();
        sb.append(doc.getText(0, doc.getLength()));
        sb.delete(offset, offset + length);

        if (test(sb.toString())) {
            super.remove(fb, offset, length);
        } else {
            // warn the user and don't allow the insert
        }

    }
}
