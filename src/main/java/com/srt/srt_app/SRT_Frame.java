/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.srt.srt_app;

import com.github.rcaller.rstuff.RCaller;
import com.github.rcaller.rstuff.RCode;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import org.yaml.snakeyaml.Yaml;

/**
 *
 * @author Thijs Weenink
 * @version 1.0
 */
public class SRT_Frame extends javax.swing.JFrame {

    /**
     * Creates new form SRT_Frame
     */
    public SRT_Frame() {
        createRCode();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        selectFiles = new javax.swing.JButton();
        selectFilesLabel = new javax.swing.JLabel();
        processButton = new javax.swing.JButton();
        processFilesLabel = new javax.swing.JLabel();
        filesLoadedLabel = new javax.swing.JLabel();
        processLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextPane = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        SRT_menubar = new javax.swing.JMenuBar();
        SRTMenu1 = new javax.swing.JMenu();
        selectConfig = new javax.swing.JMenuItem();
        editConfig = new javax.swing.JMenuItem();

        fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("SRT app");
        setName("SRT_app"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        selectFiles.setText("Select...");
        selectFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFilesActionPerformed(evt);
            }
        });

        selectFilesLabel.setText("Select files");

        processButton.setText("Process");
        processButton.setEnabled(false);
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });

        processFilesLabel.setText("Process files");

        outputTextPane.setEditable(false);
        outputTextPane.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jScrollPane1.setViewportView(outputTextPane);

        jLabel1.setText("Status");

        SRTMenu1.setText("Config");

        selectConfig.setText("Select");
        selectConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectConfigActionPerformed(evt);
            }
        });
        SRTMenu1.add(selectConfig);

        editConfig.setText("Edit");
        SRTMenu1.add(editConfig);

        SRT_menubar.add(SRTMenu1);

        setJMenuBar(SRT_menubar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(processFilesLabel)
                                    .addComponent(selectFilesLabel)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(selectFiles)
                                    .addComponent(processButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(filesLoadedLabel)
                                    .addComponent(processLabel))))
                        .addGap(0, 191, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectFilesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectFiles)
                    .addComponent(filesLoadedLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(processFilesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processButton)
                    .addComponent(processLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //TODO: Remove Loggers
    //TODO: Add comments
    private void selectFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFilesActionPerformed
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TXT Files", "txt");
        File[] files = selectMultipleFiles(filter);
        if (files == null) {
            if (!"".equals(filesLoadedLabel.getText())) {
                // TODO: Check syntax
                new Thread() {
                    @Override
                    public void run() {
                        String temp = filesLoadedLabel.getText();
                        filesLoadedLabel.setText("File selection cancelled");
                        try {
                            Thread.sleep(1500);
                        } catch (InterruptedException ex) {
                        }
                        filesLoadedLabel.setText(temp);
                    }
                }.start();
            }
            System.out.println("File access cancelled by user.");
        } else {
            processButton.setEnabled(true);
            selectedFiles = files;
            String labelString;
            int amountFiles = files.length;
            if (amountFiles == 1) {
                labelString = "1 file selected";
            } else {
                labelString = String.format("%d files selected", amountFiles);
            }
            filesLoadedLabel.setText(labelString);
        }
    }//GEN-LAST:event_selectFilesActionPerformed

    private void selectConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectConfigActionPerformed
        FileNameExtensionFilter filter = new FileNameExtensionFilter("YML Files", "yml");
        File file = selectSingleFile(filter);
        if (file != null) {
            Map<String, Object> yamlConfig = getConfig(file);
        }
    }//GEN-LAST:event_selectConfigActionPerformed

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        new Thread() {
            @Override
            public void run() {
                processLabel.setText("Working...");
                Map<String, String> fileSuccess = processSelectedFiles();
                processLabel.setText("Done");
                handleOutput(fileSuccess);
            }
        }.start();
    }//GEN-LAST:event_processButtonActionPerformed

    // Custom closing to also close the RCaller processes
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try{
           caller.stopStreamConsumers();
           caller.stopRCallerOnline();
        }catch(Exception exc){
            //TODO: Remove?
            System.out.println(exc);
        }
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing
    
    /**
     * 
     * @param filter
     * @return 
     */
    private File[] selectMultipleFiles(FileNameExtensionFilter filter) {
        File[] files = null;
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.resetChoosableFileFilters();
        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            files = fileChooser.getSelectedFiles();
        }
        return files;
    }

    private File selectSingleFile(FileNameExtensionFilter filter) {
        File file = null;
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.resetChoosableFileFilters();
        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
        }
        return file;
    }

    /**
     * 
     * @param file
     * @return 
     */
    private Map<String, Object> getConfig(File file) {
        InputStream inputStream = null;
        Map<String, Object> yamlObject = null;
        try {
            Yaml yaml = new Yaml();
            inputStream = new FileInputStream(file);
            yamlObject = yaml.load(inputStream);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SRT_Frame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                inputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(SRT_Frame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return yamlObject;
    }
    
    /**
     * 
     * @param fileSuccess 
     */
    private void handleOutput(Map<String, String> fileSuccess){
        addTextToTextPane("\n");
        for(var entry : fileSuccess.entrySet()){
            addTextToTextPane(entry.getKey() + ": " + entry.getValue() + "\n");
        }
        addTextToTextPane("Results:\n");
    }
    
    /**
     * 
     * @param message 
     */
    private void addTextToTextPane(String message){
        try {
            outputTextPane.getStyledDocument().insertString(0, message, null);
        } catch (BadLocationException ex) {
        }
    }
    
    /**
     * 
     * @return 
     */
    private Map<String, String> processSelectedFiles() {
        // Converts from \ to / in filepaths, R requires it
        String[] files = Arrays.stream(selectedFiles).map(File::getAbsolutePath).map(str -> str.replaceAll("\\\\", "/")).toArray(String[]::new);
        addTextToTextPane("Current files being processed:\n" + Arrays.toString(files) + "\n\n\n");
        if(firstRun){
            code.addStringArray("input", files);
            code.addRCode("result = SRT_main(input)");
            caller.setRCode(code);
            firstRun = false;
        }else{
            code.clear();
            code.addStringArray("input", files);
            code.addRCode("result = SRT_main(input)");
        }

        caller.runAndReturnResultOnline("result");
        String[] results = caller.getParser().getAsStringArray("result");
        Map<String, String> fileSuccess = IntStream.range(0, files.length).boxed()
                .collect(Collectors.toMap(i -> files[i], i -> results[i].strip()));
        
        return fileSuccess;   
    }
    
    /**
     * 
     */
    private void createRCode(){
        code = RCode.create();
        caller = RCaller.create();
        String rSource = "Rcode/main.R";
        code.R_source(rSource);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SRT_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SRT_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SRT_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SRT_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SRT_Frame().setVisible(true);
            }
        });
    }

    private File[] selectedFiles;
    private RCode code;
    private RCaller caller;
    private boolean firstRun = true;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu SRTMenu1;
    private javax.swing.JMenuBar SRT_menubar;
    private javax.swing.JMenuItem editConfig;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel filesLoadedLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane outputTextPane;
    private javax.swing.JButton processButton;
    private javax.swing.JLabel processFilesLabel;
    private javax.swing.JLabel processLabel;
    private javax.swing.JMenuItem selectConfig;
    private javax.swing.JButton selectFiles;
    private javax.swing.JLabel selectFilesLabel;
    // End of variables declaration//GEN-END:variables
}
